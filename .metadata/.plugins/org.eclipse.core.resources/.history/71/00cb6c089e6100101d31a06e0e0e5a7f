package com.isc.api.controllers;

import com.isc.api.dto.request.InvoiceRequestDTO;
import com.isc.api.dto.response.EquipmentDetailResponseDTO;
import com.isc.api.dto.response.InvoiceDetailResponseDTO;
import com.isc.api.dto.response.InvoiceResponseDTO;
import com.isc.api.dto.response.MessageResponseDTO;
import com.isc.api.entitys.EquipmentEntity;
import com.isc.api.entitys.InvoiceEntity;
import com.isc.api.mapper.InvoiceMapper;
import com.isc.api.repository.EquipmentRepository;
import com.isc.api.repository.InvoiceRepository;
import com.isc.dtos.MetadataResponseDto;
import com.isc.dtos.ResponseDto;

import jakarta.validation.Valid;

import com.isc.api.service.InvoiceService;

import lombok.RequiredArgsConstructor;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/v1/invoices")
@RequiredArgsConstructor
public class InvoiceController {

    private final InvoiceService invoiceService;
    private final EquipmentRepository equipmentRepository;

    @GetMapping("/details")
    public ResponseEntity<ResponseDto<List<InvoiceDetailResponseDTO>>> getAllDetails() {
        return ResponseEntity.ok(invoiceService.getAllDetails());
    }

    @GetMapping("/list")
    public ResponseEntity<ResponseDto<List<InvoiceResponseDTO>>> getSimpleList() {
        return ResponseEntity.ok(invoiceService.getSimpleList());
    }
    
    @GetMapping("/get-by-serial/{serialNumber}")
    public ResponseEntity<ResponseDto<InvoiceDetailResponseDTO>> getBySerialNumber(@PathVariable String serialNumber) {
    	Object equipmentRepository;
		EquipmentEntity equipment = equipmentRepository.findBySerialNumber(serialNumber)
                .orElseThrow(() -> new RuntimeException("Equipo no encontrado con ese n√∫mero de serie"));

        InvoiceEntity invoice = equipment.getInvoice();
        if (invoice == null) {
            throw new RuntimeException("El equipo no tiene una factura asociada");
        }

        InvoiceDetailResponseDTO response = InvoiceMapper.toInvoiceDetailDto(invoice);
        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.OK, "Factura cargada correctamente desde el equipo");
        return ResponseEntity.ok(new ResponseDto<>(response, metadata));

    }
    
    @GetMapping("/get-number/{invoiceNumber}")
    public ResponseEntity<ResponseDto<InvoiceDetailResponseDTO>> getByInvoiceNumber(@PathVariable String invoiceNumber) {
        return ResponseEntity.ok(invoiceService.getInvoiceByInvoiceNumber(invoiceNumber));

    }
    
    @PostMapping("/save")
	public ResponseEntity<InvoiceEntity> save(@Valid@RequestBody InvoiceRequestDTO request){
		return ResponseEntity.ok(invoiceService.save(request));
	}
	
	@PutMapping("/update/{id}")
	public ResponseEntity<InvoiceEntity> update(@Valid@RequestBody InvoiceRequestDTO request, @PathVariable Integer id){
		return ResponseEntity.ok(invoiceService.update(request,id));
	}

    @PatchMapping("/inactive/{id}")
    public ResponseEntity<ResponseDto<MessageResponseDTO>> inactive(@PathVariable Integer id) {
        return ResponseEntity.ok(invoiceService.inactive(id));
    }

    @PatchMapping("/active/{id}")
    public ResponseEntity<ResponseDto<MessageResponseDTO>> active(@PathVariable Integer id) {
        return ResponseEntity.ok(invoiceService.active(id));
    }
}
