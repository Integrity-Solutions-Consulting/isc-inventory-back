package com.isc.api.service.impl;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.imageio.ImageIO;

import org.apache.batik.transcoder.TranscoderInput;
import org.apache.batik.transcoder.image.PNGTranscoder;
import org.springframework.stereotype.Service;

import com.isc.api.dto.response.EquipmentCharacteristicsReportResponseDTO;
import com.isc.api.entitys.EquipmentAssignmentEntity;
import com.isc.api.entitys.EquipmentEntity;
import com.isc.api.mapper.EquipmentCharacteristicMapper;
import com.isc.api.service.ReportService;

import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;

@Service
public class ReportServiceImpl implements ReportService{

	@Override
	public byte[] generateReport(EquipmentAssignmentEntity assigment) throws JRException {

        // 1. Cargar y compilar el jrxml desde /resources/templates/report/
        InputStream reportStream = getClass().getResourceAsStream("/templates/report/report2.jrxml");
        JasperReport jasperReport = JasperCompileManager.compileReport(reportStream);

        // 2. Crear parámetros
        Map<String, Object> params = new HashMap<>();
        params.put("employeeName", assigment.getEmployee().getFirstName()+ " "+assigment.getEmployee().getLastName());
        params.put("employeeId", assigment.getEmployee().getIdentification());
        params.put("employeeIdType", assigment.getEmployee().getIdentificationType().getDescription());
        params.put("itemCode", assigment.getEquipment().getItemCode());
        params.put("serialNumber", assigment.getEquipment().getSerialNumber());
        params.put("brand", assigment.getEquipment().getBrand());
        params.put("model", assigment.getEquipment().getModel());
        params.put("date", assigment.getAssignmentDate());
        params.put("logo", loadSvgAsImage());
        
        List<EquipmentCharacteristicsReportResponseDTO> dtos = 
        		assigment.getEquipment().getCharacteristic().stream()
        	        .map(EquipmentCharacteristicMapper::toReportDto)
        	        .collect(Collectors.toList());

        // 3. Dataset para la tabla "caracteristicas"
        JRBeanCollectionDataSource caracteristicasDataSource =
                new JRBeanCollectionDataSource(dtos);

        params.put("caracteristicas", caracteristicasDataSource);

        // 4. Llenar el reporte
        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, new JREmptyDataSource());

        // 5. Exportar a PDF
        return JasperExportManager.exportReportToPdf(jasperPrint);
    }
	
	private BufferedImage loadSvgAsImage() throws Exception {
	    // Cargar el SVG desde resources
	    try (InputStream svgInputStream = getClass().getClassLoader().getResourceAsStream("logo.svg")) {
	        if (svgInputStream == null) {
	            throw new IllegalArgumentException("No se encontró logo.svg en /resources");
	        }

	        TranscoderInput input = new TranscoderInput(svgInputStream);
	        ByteArrayOutputStream pngOutputStream = new ByteArrayOutputStream();

	        PNGTranscoder transcoder = new PNGTranscoder();
	        transcoder.transcode(input, new org.apache.batik.transcoder.TranscoderOutput(pngOutputStream));

	        // Convertir bytes PNG a BufferedImage
	        try (InputStream isPng = new java.io.ByteArrayInputStream(pngOutputStream.toByteArray())) {
	            return ImageIO.read(isPng);
	        }
	    }
	}
}
