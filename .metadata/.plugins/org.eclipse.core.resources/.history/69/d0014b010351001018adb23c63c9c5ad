package com.isc.service.impl;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.isc.dto.request.EquipmentRepairRequestDTO;
import com.isc.dto.response.EquipmentRepairDetailResponseDTO;
import com.isc.dto.response.EquipmentRepairResponseDTO;
import com.isc.dto.response.MessageResponseDTO;
import com.isc.dtos.MetadataResponseDto;
import com.isc.dtos.ResponseDto;
import com.isc.entitys.EquipmentEntity;
import com.isc.entitys.EquipmentRepairEntity;
import com.isc.entitys.EquipmentStatusEntity;
import com.isc.mapper.EquipmentCharacteristicMapper;
import com.isc.mapper.EquipmentRepairMapper;
import com.isc.repository.EquipmentRepairRepository;
import com.isc.repository.EquipmentRepository;
import com.isc.repository.EquipmentStatusRepository;
import com.isc.service.EquipmentRepairService;
import org.springframework.http.HttpStatus;

@Service
public class EquipmentRepairServiceImpl implements EquipmentRepairService {

    private EquipmentRepairRepository repairRepository;
    private EquipmentRepository equipmentRepository;
    private EquipmentStatusRepository statusRepository;

    @Override
    public ResponseDto<List<EquipmentRepairDetailResponseDTO>> getAllDetails() {
        List<EquipmentRepairDetailResponseDTO> response = repairRepository.findAll().stream()
                .map(EquipmentRepairMapper::toDetailDto)
                .collect(Collectors.toList());
        
        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.OK, "Reparaciones listadas correctamente");
        return new ResponseDto<>(response, metadata);
     }

    @Override
    public ResponseDto<List<EquipmentRepairResponseDTO>> getSimpleList() {
        List<EquipmentRepairResponseDTO> response = repairRepository.findAll().stream()
                .map(EquipmentRepairMapper::toSimpleDto)
                .collect(Collectors.toList());
        
        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.OK, "Reparaciones listadas correctamente");
        return new ResponseDto<>(response, metadata);
    }
    
    @Override
    public ResponseDto<EquipmentRepairDetailResponseDTO> save(EquipmentRepairRequestDTO request) {
        // Buscar el equipo
        EquipmentEntity equipment = equipmentRepository.findById(request.getEquipment())
            .orElseThrow(() -> new RuntimeException("Equipo no encontrado con ID: " + request.getEquipment()));

        //Buscar o crear el estado "EN_REPARACION"
        EquipmentStatusEntity repairStatus = statusRepository.findByName("EN_REPARACION")
            .orElseGet(() -> {
                EquipmentStatusEntity newStatus = new EquipmentStatusEntity();
                newStatus.setName("EN_REPARACION");
                newStatus.setStatus(true);
                newStatus.setCreationDate(LocalDateTime.now());
                return statusRepository.save(newStatus);
            });

        equipment.setEquipStatus(repairStatus);
        equipment.setModificationDate(LocalDateTime.now());
        equipmentRepository.save(equipment);

        EquipmentRepairEntity repair = EquipmentRepairMapper.toEntity(request, equipment);
        repair.setCreationDate(LocalDateTime.now());
        repair.setStatus(true);
        EquipmentRepairEntity savedRepair = repairRepository.save(repair);

        EquipmentRepairDetailResponseDTO responseDTO = EquipmentRepairMapper.toDetailDTO(savedRepair);

        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.CREATED,"Reparación registrada correctamente");
        return new ResponseDto<>(responseDTO, metadata);
    }   

    @Override
    public ResponseDto<EquipmentRepairDetailResponseDTO> update(EquipmentRepairRequestDTO request, Integer id) {
        
    }

    @Override
    public ResponseDto<MessageResponseDTO> inactive(Integer id) {
    	int rowsAffected = repairRepository.inactive(id);
        if (rowsAffected == 0) {
            throw new RuntimeException("No se pudo inactivar la característica con ID: " + id);
        }
        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.OK, "Característica inactivada correctamente");
        return new ResponseDto<>(new MessageResponseDTO("Operación exitosa"), metadata);
    }

    @Override
    public ResponseDto<MessageResponseDTO> active(Integer id) {
    	int rowsAffected = repairRepository.active(id);
        if (rowsAffected == 0) {
            throw new RuntimeException("No se pudo activar la característica con ID: " + id);
        }
        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.OK, "Característica activada correctamente");
        return new ResponseDto<>(new MessageResponseDTO("Operación exitosa"), metadata);
    }
}
