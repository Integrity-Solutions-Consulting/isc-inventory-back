package com.isc.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.isc.dto.request.EquipmentRequest;
import com.isc.dto.response.EquipmentDetailResponseDTO;
import com.isc.dto.response.EquipmentResponseDTO;
import com.isc.dto.response.MessageResponseDTO;
import com.isc.dtos.MetadataResponseDto;
import com.isc.dtos.ResponseDto;
import com.isc.entitys.*;
import com.isc.mapper.EquipmentMapper;
import com.isc.repository.*;
import com.isc.service.EquipmentCategoryStockService;
import com.isc.service.EquipmentService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class EquipmentServiceImpl implements EquipmentService {

    private final EquipmentRepository equipmentRepository;
    private final EquipmentStatusRepository statusRepository;
    private final EquipmentCategoryRepository categoryRepository;
    private final CompanyRepository companyRepository;
    private final EquipmentCharacteristicRepository characteristicRepository;
    private final EquipmentCategoryStockService stockService;

    @Override
    public ResponseDto<List<EquipmentDetailResponseDTO>> getAllDetails() {
        List<EquipmentDetailResponseDTO> response = equipmentRepository.findAll().stream()
                .map(EquipmentMapper::toDetailDto)
                .collect(Collectors.toList());

        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.OK, "Equipos listados correctamente");
        return new ResponseDto<>(response, metadata);
    }

    @Override
    public ResponseDto<List<EquipmentResponseDTO>> getSimpleList() {
        List<EquipmentResponseDTO> response = equipmentRepository.findAllByStatusTrue().stream()
                .map(EquipmentMapper::toSimpleDto)
                .collect(Collectors.toList());

        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.OK, "Equipos activos listados correctamente");
        return new ResponseDto<>(response, metadata);
    }

    @Override
    public ResponseDto<EquipmentDetailResponseDTO> save(EquipmentRequest request) {
        EquipmentStatusEntity status = statusRepository.findById(request.getEquipStatus())
                .orElseThrow(() -> new RuntimeException("Estado del equipo no encontrado"));
        EquipmentCategoryEntity category = categoryRepository.findById(request.getCategory())
                .orElseThrow(() -> new RuntimeException("Categoría no encontrada"));
        CompanyEntity company = companyRepository.findById(request.getCompany())
                .orElseThrow(() -> new RuntimeException("Empresa no encontrada"));
        EquipmentCharacteristicEntity characteristic = characteristicRepository.findById(request.getCharacteristic())
                .orElseThrow(() -> new RuntimeException("Característica no encontrada"));

        EquipmentEntity entity = new EquipmentEntity();
        entity.setInvoice(request.getInvoice());
        entity.setEquipStatus(status);
        entity.setCategory(category);
        entity.setCompany(company);
        entity.setCharacteristic(characteristic);
        entity.setBrand(request.getBrand());
        entity.setModel(request.getModel());
        entity.setSerialNumber(request.getSerialNumber());
        entity.setItemCode(request.getItemCode());

        entity = equipmentRepository.save(entity);

        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.CREATED, "Equipo creado correctamente");
        return new ResponseDto<>(EquipmentMapper.toDetailDto(entity), metadata);
    }

    @Override
    public ResponseDto<EquipmentDetailResponseDTO> update(EquipmentRequest request, Integer id) {
        EquipmentEntity entity = equipmentRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Equipo no encontrado"));

        EquipmentStatusEntity status = statusRepository.findById(request.getEquipStatus())
                .orElseThrow(() -> new RuntimeException("Estado del equipo no encontrado"));
        EquipmentCategoryEntity category = categoryRepository.findById(request.getCategory())
                .orElseThrow(() -> new RuntimeException("Categoría no encontrada"));
        CompanyEntity company = companyRepository.findById(request.getCompany())
                .orElseThrow(() -> new RuntimeException("Empresa no encontrada"));
        EquipmentCharacteristicEntity characteristic = characteristicRepository.findById(request.getCharacteristic())
                .orElseThrow(() -> new RuntimeException("Característica no encontrada"));

        entity.setInvoice(request.getInvoice());
        entity.setEquipStatus(status);
        entity.setCategory(category);
        entity.setCompany(company);
        entity.setCharacteristic(characteristic);
        entity.setBrand(request.getBrand());
        entity.setModel(request.getModel());
        entity.setSerialNumber(request.getSerialNumber());
        entity.setItemCode(request.getItemCode());
        entity.setModificationDate(java.time.LocalDateTime.now());

        entity = equipmentRepository.save(entity);

        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.OK, "Equipo actualizado correctamente");
        return new ResponseDto<>(EquipmentMapper.toDetailDto(entity), metadata);
    }

    @Override
    public ResponseDto<MessageResponseDTO> inactive(Integer id) {
        int rowsAffected = equipmentRepository.inactive(id);
        if (rowsAffected == 0) {
            throw new RuntimeException("No se pudo inactivar el equipo con ID: " + id);
        }
        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.OK, "Equipo inactivado correctamente");
        return new ResponseDto<>(new MessageResponseDTO("Operación exitosa"), metadata);
    }

    @Override
    public ResponseDto<MessageResponseDTO> active(Integer id) {
        int rowsAffected = equipmentRepository.active(id);
        if (rowsAffected == 0) {
            throw new RuntimeException("No se pudo activar el equipo con ID: " + id);
        }
        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.OK, "Equipo activado correctamente");
        return new ResponseDto<>(new MessageResponseDTO("Operación exitosa"), metadata);
    }

    //Cambiar estado del equipo
    @Override
    public ResponseDto<MessageResponseDTO> cambiarEstado(Integer idEquipo, String nuevoEstadoNombre) {
        EquipmentEntity equipo = equipmentRepository.findById(idEquipo)
            .orElseThrow(() -> new RuntimeException("Equipo no encontrado"));

        EquipmentStatusEntity nuevoEstado = statusRepository.findByName(nuevoEstadoNombre)
            .orElseThrow(() -> new RuntimeException("Estado no encontrado: " + nuevoEstadoNombre));

        equipo.setEquipStatus(nuevoEstado);
        equipmentRepository.save(equipo);

        MetadataResponseDto metadata = new MetadataResponseDto(HttpStatus.OK, "Estado del equipo actualizado correctamente");
        return new ResponseDto<>(new MessageResponseDTO("Estado cambiado a: " + nuevoEstadoNombre), metadata);
    }
}
